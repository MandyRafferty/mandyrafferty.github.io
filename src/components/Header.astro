---
import { config } from '../config';
import ThemeToggle from './ThemeToggle.astro';

const { base = '' } = Astro.site ? { base: import.meta.env.BASE_URL } : { base: '' };
const mdProjGlob = import.meta.glob('../content/myprojects/*.md', { eager: true });
const mdxProjGlob = import.meta.glob('../content/myprojects/*.mdx', { eager: true });
const allProjects = [...Object.values(mdProjGlob), ...Object.values(mdxProjGlob)] as any[];

// Sort all projects by project_num (ascending order: 1, 2, 3, etc.)
const sortedProjects = allProjects
  .sort((a: any, b: any) => {
    // Sort by project_num - projects without project_num go to end
    const aNum = a.frontmatter.project_num || 999;
    const bNum = b.frontmatter.project_num || 999;
    return aNum - bNum;
  });

const ewbProject = allProjects.find(project => 
  project.file.includes('ewb-kenya.md')
);
const ewbSlug = ewbProject?.file.split('/').pop()?.replace(/\.(md|mdx)$/, '');
---

<header class="site-header">
  <div class="header-content">
    <!-- Mobile hamburger button - far left on mobile -->
    <button class="hamburger-toggle mobile-only" id="hamburger-toggle" aria-label="Toggle navigation menu" aria-expanded="false">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path class="hamburger-line" d="M3 6h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        <path class="hamburger-line" d="M3 12h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        <path class="hamburger-line" d="M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>

    <div class="site-title">
      <a href={base}>
        <svg class="icon-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path fill="currentColor" d="m18.85 10l-.2-1.05q-.225-.075-.412-.188T17.9 8.5l-1.05.35l-.7-1.2l.85-.75q-.05-.125-.05-.2v-.4q0-.075.05-.2l-.85-.75l.7-1.2l1.05.35q.15-.15.338-.263t.412-.187l.2-1.05h1.4l.2 1.05q.225.075.413.188t.337.262l1.05-.35l.7 1.2l-.85.75q.05.125.05.2v.4q0 .075-.05.2l.85.75l-.7 1.2l-1.05-.35q-.15.15-.337.263t-.413.187l-.2 1.05h-1.4Zm.7-2.25q.525 0 .888-.363T20.8 6.5q0-.525-.363-.888t-.887-.362q-.525 0-.888.363T18.3 6.5q0 .525.363.888t.887.362Zm-3 7.25l-.15-.75q-.15-.05-.287-.113t-.263-.187l-.7.25l-.5-.9l.55-.5v-.6l-.55-.5l.5-.9l.7.25q.1-.1.25-.175t.3-.125l.15-.75h1l.15.75q.15.05.3.125t.25.175l.7-.25l.5.9l-.55.5v.6l.55.5l-.5.9l-.7-.25q-.125.125-.263.188t-.287.112l-.15.75h-1Zm.5-1.75q.3 0 .525-.225t.225-.525q0-.3-.225-.525t-.525-.225q-.3 0-.525.225t-.225.525q0 .3.225.525t.525.225Zm-8-.25q-1.65 0-2.825-1.175T5.05 9H4.3V8h.75q0-1.125.55-2.025T7.05 4.55v.95q0 .225.138.363T7.55 6q.225 0 .363-.138T8.05 5.5V4.15q.225-.075.475-.113T9.05 4q.275 0 .525.038t.475.112V5.5q0 .225.138.363T10.55 6q.225 0 .363-.138t.137-.362v-.95q.9.525 1.45 1.425T13.05 8h.75v1h-.75q0 1.65-1.175 2.825T9.05 13Zm0-2q.825 0 1.413-.588T11.05 9h-4q0 .825.588 1.413T9.05 11Zm-8 10v-2.8q0-.825.425-1.55t1.175-1.1q1.275-.65 2.875-1.1T9.05 14q1.925 0 3.525.45t2.875 1.1q.75.375 1.175 1.1t.425 1.55V21h-16Zm2-2h12v-.8q0-.275-.138-.5t-.362-.35q-.9-.45-2.313-.9T9.05 16q-1.775 0-3.188.45t-2.312.9q-.225.125-.362.35t-.138.5v.8Zm6 0Z"/>
        </svg>
      </a>
    </div>
    
    <!-- <div class="site-icon">
      <a href={base}>
        <img src={base + "site-icon.svg"} alt={config.title} class="icon-svg" />
      </a>
    </div> -->
    
    <div class="header-controls">
      <nav class="main-navigation" role="navigation" aria-label="Main navigation">
        <ul class="nav-list">
            <li class="nav-item"><a href={base} class="nav-link">Home</a></li>
            <li class="nav-item">
                <a href={base + "myprojects"} class="nav-link">My Projects</a>
                <ul class="dropdown-menu">
                    <li><a href={`${base}engineering-projects/`} class="dropdown-link">Engineering Projects</a></li>
                    <li><a href={`${base}DIYdesign/`} class="dropdown-link">DIY Design & Fabrication</a></li>
                    <li><a href={`${base}myprojects/${ewbSlug}/`} class="dropdown-link">Engineers Without Borders: Project Kenya</a></li>
                </ul>
            </li>
            <li class="nav-item"><a href={base + "about"} class="nav-link">About Me</a></li>
            <li class="nav-item"><a href={base + "contact"} class="nav-link">Contact</a></li>
        </ul>
      </nav>
      
      <!-- Mobile controls group - RSS and Search on right -->
      <div class="mobile-controls">
        <ThemeToggle />
        <!-- <a href="https://github.com/jdrhyne2/volks-typo" class="github-star-button" target="_blank" rel="noopener" title="Star on GitHub">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <path d="M12 2C6.477 2 2 6.463 2 11.97c0 4.404 2.865 8.14 6.839 9.458.5.092.682-.216.682-.48 0-.236-.008-.864-.013-1.695-2.782.602-3.369-1.337-3.369-1.337-.454-1.151-1.11-1.458-1.11-1.458-.908-.618.069-.606.069-.606 1.003.07 1.531 1.027 1.531 1.027.892 1.524 2.341 1.084 2.91.828.092-.643.35-1.083.636-1.332-2.22-.251-4.555-1.107-4.555-4.927 0-1.088.39-1.979 1.029-2.675-.103-.252-.446-1.266.098-2.638 0 0 .84-.268 2.75 1.022A9.607 9.607 0 0112 6.82a9.55 9.55 0 012.504.336c1.909-1.29 2.747-1.022 2.747-1.022.546 1.372.202 2.386.1 2.638.64.696 1.028 1.587 1.028 2.675 0 3.83-2.339 4.673-4.566 4.92.359.307.678.915.678 1.846 0 1.332-.012 2.407-.012 2.734 0 .267.18.577.688.48 3.97-1.32 6.833-5.054 6.833-9.458C22 6.463 17.522 2 12 2z" fill="currentColor"/>
          </svg>
          <span class="github-star-text">Star</span>
        </a> -->
      </div>
        
        <!-- <a href={base + "rss.xml"} class="rss-toggle" title="RSS Feed">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <circle cx="5" cy="19" r="2" fill="currentColor"/>
            <path d="M3 3v2c8.284 0 15 6.716 15 15h2c0-9.389-7.611-17-17-17z" fill="currentColor"/>
            <path d="M3 9v2c4.963 0 9 4.037 9 9h2c0-6.065-4.935-11-11-11z" fill="currentColor"/>
          </svg>
          <span class="visually-hidden">RSS</span>
        </a>
        
        <button class="search-toggle" id="search-toggle" aria-label="Search articles">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M21 21l-4.35-4.35" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header> -->

<nav class="mobile-menu" id="mobile-menu" aria-label="Mobile navigation">
  <ul class="mobile-nav-list">
    <li><a href={base} class="mobile-nav-link">Home</a></li>
    <li><a href={base + "myprojects"} class="mobile-nav-link">My Projects</a></li>
    <li><a href={base + "about"} class="mobile-nav-link">About Me</a></li>
    <li><a href={base + "contact"} class="mobile-nav-link">Contact</a></li>
  </ul>
</nav>

<div class="search-overlay" id="search-overlay">
  <div class="search-container">
    <div class="search-header">
      <input type="text" class="search-input" id="search-input" placeholder="Search articles..." autocomplete="off">
      <button class="search-close" id="search-close" aria-label="Close search">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" stroke-width="2"/>
          <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" stroke-width="2"/>
        </svg>
      </button>
    </div>
    <div class="search-results" id="search-results"></div>
  </div>
</div>

<script>
  const base = `${import.meta.env.BASE_URL || ''}`;
  
  // Hamburger menu functionality
  function initHamburgerMenu() {
    const hamburgerToggle = document.getElementById('hamburger-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const body = document.body;

    if (!hamburgerToggle || !mobileMenu) return;

    hamburgerToggle.addEventListener('click', () => {
      const isOpen = mobileMenu.classList.contains('active');
      
      if (isOpen) {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      } else {
        mobileMenu.classList.add('active');
        hamburgerToggle.setAttribute('aria-expanded', 'true');
        body.style.overflow = 'hidden';
      }
    });

    // Close menu when clicking on a link
    const mobileNavLinks = mobileMenu.querySelectorAll('.mobile-nav-link');
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      });
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu.classList.contains('active')) {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      }
    });
  }

  // Search functionality
  let searchData: any[] = [];
  let searchOverlay: HTMLElement | null, searchInput: HTMLInputElement | null, searchResults: HTMLElement | null;

  async function initSearch() {
    try {
      const response = await fetch(base + 'search.json');
      searchData = await response.json();
    } catch (error) {
      console.error('Failed to load search data:', error);
    }

    searchOverlay = document.getElementById('search-overlay');
    searchInput = document.getElementById('search-input') as HTMLInputElement;
    searchResults = document.getElementById('search-results');

    // Event listeners
    document.getElementById('search-toggle')?.addEventListener('click', openSearch);
    document.getElementById('search-close')?.addEventListener('click', closeSearch);
    searchInput?.addEventListener('input', handleSearch);
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && searchOverlay?.classList.contains('active')) {
        closeSearch();
      }
    });
    
    // Close on overlay click
    searchOverlay?.addEventListener('click', (e: Event) => {
      if (e.target === searchOverlay) {
        closeSearch();
      }
    });
  }

  function openSearch() {
    searchOverlay?.classList.add('active');
    document.body.style.overflow = 'hidden';
    setTimeout(() => searchInput?.focus(), 100);
  }

  function closeSearch() {
    searchOverlay?.classList.remove('active');
    document.body.style.overflow = '';
    if (searchInput) searchInput.value = '';
    if (searchResults) searchResults.innerHTML = '';
  }

  function handleSearch(e: Event) {
    const target = e.target as HTMLInputElement;
    const query = target.value.toLowerCase().trim();
    
    if (query.length < 2) {
      if (searchResults) searchResults.innerHTML = '';
      return;
    }

    const results = searchData.filter((post: any) => 
      post.title.toLowerCase().includes(query) ||
      post.excerpt.toLowerCase().includes(query) ||
      (post.categories && post.categories.some((cat: string) => cat.toLowerCase().includes(query)))
    ).slice(0, 10);

    displayResults(results, query);
  }

  function displayResults(results: any[], query: string) {
    if (results.length === 0) {
      if (searchResults) {
        searchResults.innerHTML = `
          <div class="search-no-results">
            <p>No articles found for "${query}"</p>
          </div>
        `;
      }
      return;
    }

    const resultsHTML = results.map((post: any) => `
      <article class="search-result">
        <h3 class="search-result-title">
          <a href="${base}${post.url.startsWith('/') ? post.url.slice(1) : post.url}">${post.title}</a>
        </h3>
        <time class="search-result-date">${new Date(post.date).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}</time>
        ${post.excerpt ? `<p class="search-result-excerpt">${post.excerpt}</p>` : ''}
        ${post.categories ? `
          <div class="search-result-categories">
            ${post.categories.map((cat: string) => `<span class="search-category">${cat}</span>`).join(' ')}
          </div>
        ` : ''}
      </article>
    `).join('');

    if (searchResults) {
      searchResults.innerHTML = `
        <div class="search-results-header">
          <p>Found ${results.length} article${results.length === 1 ? '' : 's'} for "${query}"</p>
        </div>
        ${resultsHTML}
      `;
    }
  }

  // Initialize when DOM is loaded
  function init() {
    initHamburgerMenu();
    initSearch();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>

<style>
  .site-header {
    background-color: var(--color-surface);
    border-bottom: 2px solid var(--color-border);
    padding: calc(var(--grid-unit) * 3) 0;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-content {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: calc(var(--grid-unit) * 2);
  }

  .site-icon a {
    display: block;
    line-height: 0;
  }

  .icon-svg {
    color: var(--color-accent);
    height: 40px;
    width: auto;
    max-width: 280px;
    border: none !important; /* Override global img styles */
    margin: 0 !important; /* Override global img styles */
    object-fit: contain;
  }

  .header-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 3);
    flex-shrink: 0;
  }

  .search-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) / 2);
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-toggle:hover,
  .search-toggle:focus {
    color: var(--color-accent);
    outline: none;
  }

  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .search-container {
    max-width: 800px;
    margin: calc(var(--grid-unit) * 10) auto calc(var(--grid-unit) * 4) auto;
    padding: 0 var(--content-padding);
  }

  .search-header {
    display: flex;
    align-items: center;
    background: var(--color-background);
    border: 2px solid var(--color-border);
    border-radius: 8px;
    padding: calc(var(--grid-unit) * 3);
    margin-bottom: calc(var(--grid-unit) * 5);
  }

  .search-input {
    flex: 1;
    border: none;
    background: none;
    font-family: var(--font-body);
    font-size: 1.125rem;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 3);
    outline: none;
  }

  .search-input::placeholder {
    color: var(--color-text-muted);
  }

  .search-close {
    background: none;
    border: none;
    color: var(--color-text-muted);
    padding: calc(var(--grid-unit) / 2);
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-close:hover,
  .search-close:focus {
    color: var(--color-accent);
    outline: none;
  }

  .search-results {
    max-height: 70vh;
    min-height: 40vh;
    overflow-y: auto;
    background: var(--color-background);
    border-radius: 8px;
    border: 1px solid var(--color-border);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4) calc(var(--grid-unit) * 4) calc(var(--grid-unit) * 4);
  }

  .search-results:empty {
    display: none;
  }

  .search-results-header {
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4);
    margin: calc(var(--grid-unit) * -3) calc(var(--grid-unit) * -4) calc(var(--grid-unit) * 3) calc(var(--grid-unit) * -4);
    border-bottom: 1px solid var(--color-border);
    background: var(--color-surface);
    position: sticky;
    top: 0;
    z-index: 1;
  }

  .search-results-header p {
    margin: 0;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .search-result {
    padding: calc(var(--grid-unit) * 6) calc(var(--grid-unit) * 6);
    margin-bottom: calc(var(--grid-unit) * 2);
    border-bottom: 1px solid var(--color-border);
    transition: background-color 0.2s ease;
  }

  .search-result:hover {
    background-color: var(--color-surface);
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .search-result-title {
    font-family: var(--font-heading-secondary);
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: calc(var(--grid-unit) * 3);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .search-result-title a {
    color: var(--color-text-primary);
    text-decoration: none;
  }

  .search-result-title a:hover,
  .search-result-title a:focus {
    color: var(--color-accent);
  }

  .search-result-date {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: block;
    margin-bottom: calc(var(--grid-unit) * 4);
  }

  .search-result-excerpt {
    color: var(--color-text-secondary);
    line-height: 1.8;
    margin-bottom: calc(var(--grid-unit) * 5);
  }

  .search-result-categories {
    display: flex;
    flex-wrap: wrap;
    gap: calc(var(--grid-unit) * 2.5);
    margin-top: calc(var(--grid-unit) * 3);
  }

  .search-category {
    background-color: #e8a100;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) * 1.5) calc(var(--grid-unit) * 2.5);
    font-size: 0.8rem;
    font-family: var(--font-mono);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-radius: 3px;
    transition: all 0.2s ease;
  }

  .search-category:hover {
    background-color: #c13127;
    color: white;
  }

  /* Dark mode search category styles */
  :global([data-theme="dark"]) .search-category {
    background-color: var(--color-surface);
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);
  }

  :global([data-theme="dark"]) .search-category:hover {
    background-color: var(--color-accent);
    color: white;
    border-color: var(--color-accent);
  }

  .search-no-results {
    padding: calc(var(--grid-unit) * 10) calc(var(--grid-unit) * 6);
    text-align: center;
  }

  .search-no-results p {
    color: var(--color-text-muted);
    font-style: italic;
    margin: 0;
    font-size: 1.1rem;
  }

  .main-navigation {
    flex-shrink: 0;
  }

  .nav-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: calc(var(--grid-unit) * 3);
  }

  .nav-link {
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) / 2) calc(var(--grid-unit));
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }

  .nav-link:hover,
  .nav-link:focus {
    color: var(--color-accent);
    border-bottom-color: var(--color-accent);
    text-decoration: none;
  }

  .rss-link {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) / 2);
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Dropdown styles */
  .nav-item {
    position: relative;
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-10px);
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 0;
    min-width: 240px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 1000;
    list-style: none;
    margin: calc(var(--grid-unit) * 1) 0 0 0;
  }

  .nav-item:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }

  .dropdown-link {
    display: block;
    padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 3);
    color: var(--color-text-primary);
    text-decoration: none;
    font-family: var(--font-heading-secondary);
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.02em;
    transition: all 0.2s ease;
    line-height: 1.4;
    border-left: 3px solid transparent;
    margin: 0;
  }

  .dropdown-link:hover,
  .dropdown-link:focus {
    background-color: var(--color-surface);
    color: var(--color-accent);
    border-left-color: var(--color-accent);
    text-decoration: none;
  }

  .dropdown-link:last-child {
    border-bottom: none;
  }

  /* Desktop controls - visible by default */
  .mobile-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 2);
  }

  /* Hide mobile-only hamburger by default */
  .mobile-only {
    display: none !important;
  }

  .hamburger-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit));
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .rss-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit));
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
  }
  
  .github-star-button {
    background: none;
    border: 2px solid var(--color-accent);
    color: var(--color-accent);
    padding: calc(var(--grid-unit) * 0.75) calc(var(--grid-unit) * 2);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--grid-unit));
    text-decoration: none;
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.875rem;
    border-radius: 4px;
  }
  
  .github-star-button:hover,
  .github-star-button:focus {
    background-color: var(--color-accent);
    color: var(--color-background);
    outline: none;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .github-star-text {
    display: inline-block;
  }

  .hamburger-toggle:hover,
  .hamburger-toggle:focus,
  .rss-toggle:hover,
  .rss-toggle:focus {
    color: var(--color-accent);
    outline: none;
  }

  /* Mobile menu - hidden by default */
  .mobile-menu {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--color-background);
    z-index: 99;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    overflow-y: auto;
    padding-top: calc(var(--grid-unit) * 12);
  }

  .mobile-menu.active {
    transform: translateX(0);
  }

  .mobile-nav-list {
    list-style: none;
    margin: 0;
    padding: calc(var(--grid-unit) * 4) 0;
  }

  .mobile-nav-link {
    display: block;
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4);
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    font-size: 1.25rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--color-text-primary);
    text-decoration: none;
    border-bottom: 1px solid var(--color-border);
    transition: all 0.2s ease;
  }

  .mobile-nav-link:hover,
  .mobile-nav-link:focus {
    color: var(--color-accent);
    background-color: var(--color-surface);
  }

  @media (max-width: 768px) {
    .site-header {
      padding: calc(var(--grid-unit) * 2) 0;
    }

    .header-content {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: calc(var(--grid-unit) * 2);
      padding: 0 calc(var(--grid-unit) * 2);
    }

    /* Show mobile hamburger on far left */
    .mobile-only {
      display: flex !important;
      justify-self: start;
    }

    .site-icon {
      justify-self: center;
      text-align: center;
      grid-column: 2; /* Explicitly place in center column */
    }

    .site-icon a {
      display: inline-block;
    }

    .icon-svg {
      height: 40px;
      width: auto;
      max-width: 280px;
      max-height: 48px; /* Add this to prevent vertical expansion */
      border: none !important;
      margin: 0 !important;
      object-fit: contain; /* Add this to maintain aspect ratio within bounds */
    }
    
    .header-controls {
      justify-self: end;
      gap: 0;
      grid-column: 3; /* Explicitly place in right column */
    }
    
    /* Hide desktop navigation on mobile */
    .main-navigation {
      display: none;
    }
    
    /* Show mobile controls on right */
    .mobile-controls {
      display: flex !important;
      gap: calc(var(--grid-unit) * 1.5);
    }
    
    .hamburger-toggle,
    .rss-toggle,
    .search-toggle {
      padding: calc(var(--grid-unit) * 0.75);
    }

    .search-container {
      margin: calc(var(--grid-unit) * 5) auto calc(var(--grid-unit) * 3) auto;
      padding: 0 calc(var(--grid-unit) * 2);
    }

    .search-result {
      padding: calc(var(--grid-unit) * 4) calc(var(--grid-unit) * 3);
      margin-bottom: calc(var(--grid-unit) * 1.5);
    }

    .search-results {
      padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 2.5) calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 2.5);
    }
    
    .search-results-header {
      padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 2.5);
      margin: calc(var(--grid-unit) * -2) calc(var(--grid-unit) * -2.5) calc(var(--grid-unit) * 2) calc(var(--grid-unit) * -2.5);
    }
    
    .search-result-categories {
      gap: calc(var(--grid-unit) * 2);
    }
    
    .search-category {
      padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 2);
    }
    
    .search-result-title {
      margin-bottom: calc(var(--grid-unit) * 2);
    }
    
    .search-result-date {
      margin-bottom: calc(var(--grid-unit) * 3);
    }
    
    .search-result-excerpt {
      margin-bottom: calc(var(--grid-unit) * 4);
    }
    
    /* Adjust GitHub button for mobile */
    .github-star-button {
      padding: calc(var(--grid-unit) * 0.75);
      border-width: 1px;
    }
    
    .github-star-text {
      display: none;
    }
  }
  
  @media (max-width: 480px) {
    /* Even smaller mobile adjustments */
    .mobile-controls {
      gap: calc(var(--grid-unit)) !important;
    }
    
    .github-star-button,
    .rss-toggle,
    .search-toggle {
      padding: calc(var(--grid-unit) * 0.5);
    }
  }
</style>